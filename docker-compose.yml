services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg17
    container_name: easyread_postgres
    environment:
      POSTGRES_DB: easyread
      POSTGRES_USER: easyread_user
      POSTGRES_PASSWORD: easyread_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./postgres.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    networks:
      - easyread_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U easyread_user -d easyread"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Django Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: easyread_backend
    environment:
      - DEBUG=True
      - SECRET_KEY=${SECRET_KEY}
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=easyread
      - DB_USER=easyread_user
      - DB_PASSWORD=easyread_password
      - DB_HOST=postgres
      - DB_PORT=5432
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - COHERE_API_KEY=${COHERE_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION_NAME=${AWS_REGION_NAME}
    volumes:
      - ./backend:/app
      - ./media:/app/media
      - ./images:/app/images:ro
      - ./clipart_images:/app/clipart_images:ro
      - ./backend/config:/app/config:ro
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - easyread_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        - VITE_API_BASE_URL=http://127.0.0.1:${BACKEND_PORT:-8001}/api
        - VITE_MEDIA_BASE_URL=http://127.0.0.1:${BACKEND_PORT:-8001}
    container_name: easyread_frontend
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - easyread_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  easyread_network:
    driver: bridge