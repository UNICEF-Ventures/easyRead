"""
Django settings for easyread_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(BASE_DIR.parent / '.env')


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-r(!8baz4s5l9y&g6*^33kb8gu!7xu&b!^)y@tg_lz5voc^)3jh")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in ["true", "1", "yes"]

ALLOWED_HOSTS = [host.strip() for host in os.getenv("ALLOWED_HOSTS", "").split(",") if host.strip()]
# Allow Django test client host during development
if DEBUG and 'testserver' not in ALLOWED_HOSTS:
    ALLOWED_HOSTS += ['localhost', '127.0.0.1', 'testserver']


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "corsheaders",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "api.error_handlers.ErrorResponseMiddleware",
]

ROOT_URLCONF = "easyread_backend.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "api" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "easyread_backend.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Database configuration - PostgreSQL with pgvector required
# Validate required environment variables
# if not os.getenv("DB_ENGINE"):
#     raise ValueError("DB_ENGINE environment variable is required. Use 'django.db.backends.postgresql' for production.")

# if not os.getenv("DB_NAME"):
#     raise ValueError("DB_NAME environment variable is required.")

# DATABASES = {
#     "default": {
#         "ENGINE": os.getenv("DB_ENGINE"),
#         "NAME": os.getenv("DB_NAME"),
#         "USER": os.getenv("DB_USER", ""),
#         "PASSWORD": os.getenv("DB_PASSWORD", ""),
#         "HOST": os.getenv("DB_HOST", ""),
#         "PORT": os.getenv("DB_PORT", ""),
#         "OPTIONS": {
#             "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
#         } if os.getenv("DB_ENGINE") == "django.db.backends.mysql" else {},
#     }
# }

# # PostgreSQL specific configuration
# if os.getenv("DB_ENGINE") == "postgresql" or os.getenv("DATABASE_URL"):
#     # Support both individual env vars and DATABASE_URL
#     if os.getenv("DATABASE_URL"):
#         import dj_database_url
#         DATABASES["default"] = dj_database_url.parse(os.getenv("DATABASE_URL"))
#     else:
#         DATABASES["default"] = {
#             "ENGINE": "django.db.backends.postgresql",
#             "NAME": os.getenv("DB_NAME", "easyread"),
#             "USER": os.getenv("DB_USER", "easyread_user"),
#             "PASSWORD": os.getenv("DB_PASSWORD", "easyread_password"),
#             "HOST": os.getenv("DB_HOST", "localhost"),
#             "PORT": os.getenv("DB_PORT", "5432"),
#             "OPTIONS": {},
#         }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Media files (User-uploaded files)
# https://docs.djangoproject.com/en/5.2/topics/files/
MEDIA_URL = '/media/'
# Environment-aware media root configuration  
# In Docker: /app/media (mounted from project root via volume)
# Outside Docker: /project/media (project root)
# Check if we're in Docker by looking for container-specific indicators
import os
if os.path.exists('/.dockerenv') or os.environ.get('CONTAINER_ENV') == 'docker':
    # Docker environment - media is mounted at /app/media
    MEDIA_ROOT = BASE_DIR / 'media'
else:
    # Non-Docker environment - use project root media
    MEDIA_ROOT = BASE_DIR.parent / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging Configuration - Suppress SQL queries to prevent embedding vector spam
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django.db.backends': {
            'level': 'ERROR',  # Only show database errors, not SQL queries
            'handlers': ['console'],
        },
        'django.db.backends.schema': {
            'level': 'ERROR',  # Suppress schema queries
            'handlers': ['console'],
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
}

# CORS Settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", # Default Vite dev server port
    "http://127.0.0.1:5173",
    "http://localhost:3000", # Docker frontend port
    "http://127.0.0.1:3000",
    "http://localhost:5001", # Frontend dev server port (alternative)
    "http://127.0.0.1:5001",
    "http://127.0.0.1:6002",
    "http://localhost:6002",
]

# Allow credentials for admin authentication
CORS_ALLOW_CREDENTIALS = True

# CSRF Configuration for API endpoints
CSRF_COOKIE_HTTPONLY = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:5173",
    "http://127.0.0.1:5173", 
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:5001",
    "http://127.0.0.1:5001",
    "http://127.0.0.1:6002",
    "http://localhost:6002",

]

# Optional: Allow all origins for quick testing (less secure)
# CORS_ALLOW_ALL_ORIGINS = True

# File upload settings
DATA_UPLOAD_MAX_NUMBER_FILES = 1500

# API-only embedding configuration - no local ML models
import os

# Embedding Provider Configuration - API-only
# Auto-configured based on available API keys:
# 1. AWS Bedrock (Cohere Multilingual) - preferred for cost/performance  
# 2. OpenAI embeddings - good fallback
# 3. Direct Cohere API - alternative option
# Requires one of: AWS_ACCESS_KEY_ID, OPENAI_API_KEY, or COHERE_API_KEY
try:
    from api.embedding_providers.factory import auto_configure_provider
    EMBEDDING_PROVIDER_CONFIG = auto_configure_provider()
except Exception as e:
    # Fallback configuration if auto-config fails at startup
    EMBEDDING_PROVIDER_CONFIG = {
        'provider': 'cohere_bedrock',
        'config': {
            'language': 'multilingual',
            'aws_region': 'us-east-1',
            'batch_size': 25,
            'rate_limit_delay': 0.1,
            'max_retries': 3
        }
    }

# No local ML model optimizations needed - API-only mode 
